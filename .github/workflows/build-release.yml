name: Build Custom Branch and Release

on:
  workflow_dispatch: # 手动触发
    inputs:
      # 定义一个输入参数，用于指定要构建的分支
      target-branch:
        description: 'Which branch to build? (e.g., haruhikage)' 
        required: true
        default: 'haruhikage' # 默认值可以设为你的目标分支
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 赋予创建Release的权限

    steps:
      - name: Checkout the SPECIFIED branch
        uses: actions/checkout@v4
        with:
          # 关键：这里拉取的是你手动输入的分支名
          ref: ${{ github.event.inputs.target-branch }} 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # 根据你的包管理器更改，pnpm 或 yarn

      - name: Install dependencies
        run: npm ci # 或 pnpm install / yarn install --frozen-lockfile

      - name: Build project
        run: npm run build # 执行打包命令

      - name: Create Release on the DEFAULT branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取当前日期和提交SHA，用于生成唯一的Release名称
          RELEASE_NAME="build-${{ github.event.inputs.target-branch }}-$(date +'%Y%m%d-%H%M%S')"

          # 在默认分支上创建一个Draft Release（草稿）
          # 注意：gh release create 默认基于你当前所在的仓库默认分支进行操作
          gh release create "$RELEASE_NAME" \
            --title "Build of ${{ github.event.inputs.target-branch }} ($RELEASE_NAME)" \
            --notes "Automated build for branch: ${{ github.event.inputs.target-branch }}. Commit: ${{ github.sha }}" \
            --draft # 先创建为草稿，你可以检查后再发布

          # 压缩构建产物（例如dist目录）
          zip -r build-output.zip ./dist/

          # 上传资产到刚才创建的草稿Release
          gh release upload "$RELEASE_NAME" build-output.zip
